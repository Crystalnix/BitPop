/* Copyright (c) 2012 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/* This file contains NaCl private interfaces. */

#include "ppapi/c/private/pp_file_handle.h"

/* PPB_NaCl_Private */
interface PPB_NaCl_Private_0_8 {
  /* This function launches NaCl's sel_ldr process.  On success, the function
   * returns true, otherwise it returns false.  When it returns true, it will
   * write |socket_count| nacl::Handles to imc_handles.
   */
  PP_Bool LaunchSelLdr([in] PP_Instance instance,
                       [in] str_t alleged_url,
                       [in] int32_t socket_count,
                       [out] mem_t imc_handles);

  /* This function starts the PPAPI proxy so the nexe can communicate with the
   * browser's renderer process.
   */
  PP_Bool StartPpapiProxy([in] PP_Instance instance);

  /* On POSIX systems, this function returns the file descriptor of
   * /dev/urandom.  On non-POSIX systems, this function returns 0.
   */
  int32_t UrandomFD();

  /* Whether the Pepper 3D interfaces should be disabled in the NaCl PPAPI
   * proxy. This is so paranoid admins can effectively prevent untrusted shader
   * code to be processed by the graphics stack.
   */
  bool Are3DInterfacesDisabled();

  /* Returns a read-only file descriptor of a file rooted in the Pnacl
   * component directory, or -1 on error.
   * Do we want this to take a completion callback and be async, or
   * could we make this happen on another thread?
   */
  PP_FileHandle GetReadonlyPnaclFd([in] str_t filename);

  /* This creates a temporary file that will be deleted by the time
   * the last handle is closed (or earlier on POSIX systems), and
   * returns a posix handle to that temporary file.
   */
  PP_FileHandle CreateTemporaryFile([in] PP_Instance instance);

  /* Return true if we are off the record.
   */
  PP_Bool IsOffTheRecord([in] PP_Instance instance);
};
