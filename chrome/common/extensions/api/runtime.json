// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[
  {
    "namespace": "runtime",
    "documentation_permissions_required": ["runtime"],
    "properties": {
      "lastError": {
        "type": "object",
        "optional": true,
        "description": "This will be defined during an API method callback if there was an error",
        "unprivileged": true,
        "properties": {
          "message": {
            "optional": true,
            "type": "string",
            "description": "Details about the error which occurred."
          }
        }
      },
      "id": {
        "type": "string",
        "description": "The ID of the extension/app.",
        "unprivileged": true
      }
    },
    "types": [
      {
        "id": "ManifestDetails",
        "description": "Details from the manifest for the current extension/app.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the extension/app"
          },
          "version": {
            "type":"string",
            "description": "The version of the extension/app"
          },
          "manifest_version": {
            "optional": true,
            "type": "integer"
          },
          "permissions": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": { "type": "any" }
      }
    ],
    "functions": [
      {
        "name": "getBackgroundPage",
        "type": "function",
        "description": "Retrieves the JavaScript 'window' object for the background page running inside the current extension. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "backgroundPage",
                // Note: Only optional because we don't support validation
                // for custom callbacks.
                "optional": true,
                "type": "object",
                "isInstanceOf": "global",
                "additionalProperties": { "type": "any" },
                "description": "The JavaScript 'window' object for the background page."
              }
            ]
          }
        ]
      },
      {
        "name": "getManifest",
        "description": "Returns details about the app or extension from the manifest",
        "type": "function",
        "unprivileged": true,
        "parameters": [],
        "returns": {
          "$ref": "ManifestDetails",
          "description": "The manifest details."
        }
      },
      {
        "name": "getURL",
        "type": "function",
        "unprivileged": true,
        "description": "Converts a relative path within an app/extension install directory to a fully-qualified URL.",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "description": "A path to a resource within an app/extension expressed relative to its install directory."
          }
        ],
        "returns": {
          "type": "string",
          "description": "The fully-qualified URL to the resource."
        }
      }
    ],
    "events": [
      {
        "name": "onInstalled",
        "type": "function",
        "description": "Fired when the extension is first installed, and on each update to a new version."
      },
      {
        "name": "onSuspend",
        "type": "function",
        "description": "Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. "
      },
      {
        "name": "onSuspendCanceled",
        "type": "function",
        "description": "Sent after onSuspend() to indicate that the app won't be unloaded after all."
      }
    ]
  }
]
