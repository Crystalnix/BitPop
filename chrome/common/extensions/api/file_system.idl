// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// File-level comment to appease parser. Eventually this will not be necessary.

namespace fileSystem {
  dictionary ChooseFileOptions {
    // Type of the prompt to show. Valid types are 'openFile',
    // 'openWritableFile' or 'saveFile'.
    //
    // Both 'openFile' and 'openWritableFile' will prompt the user to open an
    // existing file, with 'openFile' returning a read-only FileEntry on
    // success. 'saveFile' will prompt the user to choose an existing file or
    // a new file, and will return a writable FileEntry.
    // Calls to chooseFile with either 'openWritableFile' or 'saveFile' will
    // fail unless the application has the fileSystemWrite permission.
    //
    // The default is 'openFile'.
    DOMString? type;

    // The suggested file name that will be presented to the user as the
    // default name to read or write. This is optional.
    DOMString? suggestedName;
  };
  callback GetDisplayPathCallback = void (DOMString displayPath);
  callback FileEntryCallback = void ([instanceOf=FileEntry] object fileEntry);
  callback IsWritableCallback = void (boolean isWritable);

  interface Functions {
    // Get the display path of a FileEntry object. The display path is based on
    // the full path of the file on the local file system, but may be made more
    // readable for display purposes.
    static void getDisplayPath([instanceOf=FileEntry] object fileEntry,
                               GetDisplayPathCallback callback);

    // Get a writable FileEntry from another FileEntry. This call will fail
    // if the application does not have the fileSystemWrite permission.
    static void getWritableFileEntry([instanceOf=FileEntry] object fileEntry,
                                     FileEntryCallback callback);

    // Gets whether this FileEntry is writable or not.
    static void isWritableFileEntry([instanceOf=FileEntry] object fileEntry,
                                    IsWritableCallback callback);

    // Ask the user to choose a file.
    static void chooseFile(optional ChooseFileOptions options,
                           FileEntryCallback callback);
  };
};
